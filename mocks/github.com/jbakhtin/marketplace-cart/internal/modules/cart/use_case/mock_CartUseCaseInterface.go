// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/jbakhtin/marketplace-cart/internal/modules/cart/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockCartUseCaseInterface is an autogenerated mock type for the CartUseCaseInterface type
type MockCartUseCaseInterface struct {
	mock.Mock
}

type MockCartUseCaseInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCartUseCaseInterface) EXPECT() *MockCartUseCaseInterface_Expecter {
	return &MockCartUseCaseInterface_Expecter{mock: &_m.Mock}
}

// AddItem provides a mock function with given fields: ctx, item
func (_m *MockCartUseCaseInterface) AddItem(ctx context.Context, item domain.Item) error {
	ret := _m.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for AddItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Item) error); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCartUseCaseInterface_AddItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddItem'
type MockCartUseCaseInterface_AddItem_Call struct {
	*mock.Call
}

// AddItem is a helper method to define mock.On call
//   - ctx context.Context
//   - item domain.Item
func (_e *MockCartUseCaseInterface_Expecter) AddItem(ctx interface{}, item interface{}) *MockCartUseCaseInterface_AddItem_Call {
	return &MockCartUseCaseInterface_AddItem_Call{Call: _e.mock.On("AddItem", ctx, item)}
}

func (_c *MockCartUseCaseInterface_AddItem_Call) Run(run func(ctx context.Context, item domain.Item)) *MockCartUseCaseInterface_AddItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Item))
	})
	return _c
}

func (_c *MockCartUseCaseInterface_AddItem_Call) Return(_a0 error) *MockCartUseCaseInterface_AddItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCartUseCaseInterface_AddItem_Call) RunAndReturn(run func(context.Context, domain.Item) error) *MockCartUseCaseInterface_AddItem_Call {
	_c.Call.Return(run)
	return _c
}

// Checkout provides a mock function with given fields: ctx
func (_m *MockCartUseCaseInterface) Checkout(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Checkout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCartUseCaseInterface_Checkout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Checkout'
type MockCartUseCaseInterface_Checkout_Call struct {
	*mock.Call
}

// Checkout is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCartUseCaseInterface_Expecter) Checkout(ctx interface{}) *MockCartUseCaseInterface_Checkout_Call {
	return &MockCartUseCaseInterface_Checkout_Call{Call: _e.mock.On("Checkout", ctx)}
}

func (_c *MockCartUseCaseInterface_Checkout_Call) Run(run func(ctx context.Context)) *MockCartUseCaseInterface_Checkout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCartUseCaseInterface_Checkout_Call) Return(_a0 error) *MockCartUseCaseInterface_Checkout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCartUseCaseInterface_Checkout_Call) RunAndReturn(run func(context.Context) error) *MockCartUseCaseInterface_Checkout_Call {
	_c.Call.Return(run)
	return _c
}

// Clear provides a mock function with given fields: ctx
func (_m *MockCartUseCaseInterface) Clear(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Clear")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCartUseCaseInterface_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type MockCartUseCaseInterface_Clear_Call struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCartUseCaseInterface_Expecter) Clear(ctx interface{}) *MockCartUseCaseInterface_Clear_Call {
	return &MockCartUseCaseInterface_Clear_Call{Call: _e.mock.On("Clear", ctx)}
}

func (_c *MockCartUseCaseInterface_Clear_Call) Run(run func(ctx context.Context)) *MockCartUseCaseInterface_Clear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCartUseCaseInterface_Clear_Call) Return(_a0 error) *MockCartUseCaseInterface_Clear_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCartUseCaseInterface_Clear_Call) RunAndReturn(run func(context.Context) error) *MockCartUseCaseInterface_Clear_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteItem provides a mock function with given fields: ctx, item
func (_m *MockCartUseCaseInterface) DeleteItem(ctx context.Context, item domain.SKU) error {
	ret := _m.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for DeleteItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SKU) error); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCartUseCaseInterface_DeleteItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteItem'
type MockCartUseCaseInterface_DeleteItem_Call struct {
	*mock.Call
}

// DeleteItem is a helper method to define mock.On call
//   - ctx context.Context
//   - item domain.SKU
func (_e *MockCartUseCaseInterface_Expecter) DeleteItem(ctx interface{}, item interface{}) *MockCartUseCaseInterface_DeleteItem_Call {
	return &MockCartUseCaseInterface_DeleteItem_Call{Call: _e.mock.On("DeleteItem", ctx, item)}
}

func (_c *MockCartUseCaseInterface_DeleteItem_Call) Run(run func(ctx context.Context, item domain.SKU)) *MockCartUseCaseInterface_DeleteItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SKU))
	})
	return _c
}

func (_c *MockCartUseCaseInterface_DeleteItem_Call) Return(_a0 error) *MockCartUseCaseInterface_DeleteItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCartUseCaseInterface_DeleteItem_Call) RunAndReturn(run func(context.Context, domain.SKU) error) *MockCartUseCaseInterface_DeleteItem_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockCartUseCaseInterface) List(ctx context.Context) (domain.Cart, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 domain.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (domain.Cart, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) domain.Cart); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(domain.Cart)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCartUseCaseInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockCartUseCaseInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCartUseCaseInterface_Expecter) List(ctx interface{}) *MockCartUseCaseInterface_List_Call {
	return &MockCartUseCaseInterface_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockCartUseCaseInterface_List_Call) Run(run func(ctx context.Context)) *MockCartUseCaseInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCartUseCaseInterface_List_Call) Return(_a0 domain.Cart, _a1 error) *MockCartUseCaseInterface_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCartUseCaseInterface_List_Call) RunAndReturn(run func(context.Context) (domain.Cart, error)) *MockCartUseCaseInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCartUseCaseInterface creates a new instance of MockCartUseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCartUseCaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCartUseCaseInterface {
	mock := &MockCartUseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
