// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/jbakhtin/marketplace-cart/internal/modules/cart/domain"
	mock "github.com/stretchr/testify/mock"
)

// CartRepository is an autogenerated mock type for the CartRepository type
type CartRepository struct {
	mock.Mock
}

// AddItem provides a mock function with given fields: ctx, userID, sku, count
func (_m *CartRepository) AddItem(ctx context.Context, userID domain.UserID, sku domain.SKU, count domain.Count) error {
	ret := _m.Called(ctx, userID, sku, count)

	if len(ret) == 0 {
		panic("no return value specified for AddItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID, domain.SKU, domain.Count) error); ok {
		r0 = rf(ctx, userID, sku, count)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteItemBySKU provides a mock function with given fields: ctx, userID
func (_m *CartRepository) DeleteItemBySKU(ctx context.Context, userID domain.UserID) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteItemBySKU")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteItemsByUserID provides a mock function with given fields: ctx, userID
func (_m *CartRepository) DeleteItemsByUserID(ctx context.Context, userID domain.UserID) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteItemsByUserID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCartByUserID provides a mock function with given fields: ctx, userID
func (_m *CartRepository) GetCartByUserID(ctx context.Context, userID domain.UserID) (domain.Cart, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetCartByUserID")
	}

	var r0 domain.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID) (domain.Cart, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID) domain.Cart); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(domain.Cart)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.UserID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCartRepository creates a new instance of CartRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCartRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CartRepository {
	mock := &CartRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
