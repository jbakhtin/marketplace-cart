// Code generated by mockery v2.53.5. DO NOT EDIT.

package cart

import (
	context "context"

	domain "github.com/jbakhtin/marketplace-cart/internal/modules/cart/domain"
	mock "github.com/stretchr/testify/mock"
)

// CartUseCaseInterface is an autogenerated mock type for the CartUseCaseInterface type
type CartUseCaseInterface struct {
	mock.Mock
}

// AddItem provides a mock function with given fields: ctx, userID, item
func (_m *CartUseCaseInterface) AddItem(ctx context.Context, userID domain.UserID, item domain.Item) error {
	ret := _m.Called(ctx, userID, item)

	if len(ret) == 0 {
		panic("no return value specified for AddItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID, domain.Item) error); ok {
		r0 = rf(ctx, userID, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Checkout provides a mock function with given fields: ctx, userID
func (_m *CartUseCaseInterface) Checkout(ctx context.Context, userID domain.UserID) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Checkout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Clear provides a mock function with given fields: ctx, userID
func (_m *CartUseCaseInterface) Clear(ctx context.Context, userID domain.UserID) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Clear")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteItem provides a mock function with given fields: ctx, userID, item
func (_m *CartUseCaseInterface) DeleteItem(ctx context.Context, userID domain.UserID, item domain.SKU) error {
	ret := _m.Called(ctx, userID, item)

	if len(ret) == 0 {
		panic("no return value specified for DeleteItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID, domain.SKU) error); ok {
		r0 = rf(ctx, userID, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ctx, userID
func (_m *CartUseCaseInterface) List(ctx context.Context, userID domain.UserID) (domain.Cart, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 domain.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID) (domain.Cart, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID) domain.Cart); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(domain.Cart)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.UserID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCartUseCaseInterface creates a new instance of CartUseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCartUseCaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CartUseCaseInterface {
	mock := &CartUseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
